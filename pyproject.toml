[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pypms"
version = "0.6.0"
description = "Data acquisition and logging tool for PM sensors with UART interface"
authors = ["Alvaro Valdebenito <avaldebe@gmail.com>"]
readme = "README.md"
repository = "https://github.com/avaldebe/PyPMS"
keywords = ["air quality", "particulate matter"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Terminals :: Serial",
    "Topic :: Utilities",
    "Typing :: Typed",
]
packages = [{ include="pms", from="src" }]

[tool.poetry.dependencies]
python = ">=3.6,<4.0"
pyserial = ">=3.0"
mypy-extensions = ">=0.4.0"
typer = ">=0.3.0"
dataclasses = { version=">=0.6", python="^3.6" }
aenum = {version = ">=3.1", python = "^3.6"}
importlib_metadata = { version=">=3.6", python=">=3.6,<3.10" }
paho-mqtt = { version=">=1.4.0", optional=true }
influxdb = { version=">=5.2.0", optional=true }

[tool.poetry.extras]
mqtt = ["paho-mqtt"]
influxdb = ["influxdb"]

[tool.poetry.dev-dependencies]
pytest = ">=6.2.4"
pytest-cov = ">=2.12.1"
mypy = ">=0.902"
types-dataclasses = ">=0.1.5"

[tool.poetry.scripts]
pms = "pms.cli:main"

[tool.poetry.plugins."pypms.sensors"]
# docs/sensors/Plantower.md
PMSx003   = "pms.sensors.plantower.pmsx003"
PMS3003   = "pms.sensors.plantower.pms3003"
PMS5003S  = "pms.sensors.plantower.pms5003s"
PMS5003ST = "pms.sensors.plantower.pms5003st"
PMS5003T  = "pms.sensors.plantower.pms5003t"
# docs/sensors/NovaFitness.md
SDS01x    = "pms.sensors.novafitness.sds01x"
SDS198    = "pms.sensors.novafitness.sds198"
# docs/sensors/Honeywell.md
HPMA115S0 = "pms.sensors.honeywell.hpma115s0"
HPMA115C0 = "pms.sensors.honeywell.hpma115c0"
# docs/sensors/Senserion.md
SPS30     = "pms.sensors.senserion.sps30"
# docs/sensors/mcu680.md
MCU680    = "pms.sensors.bosch_sensortec.mcu680"
# docs/sensors/Winsen.md
MHZ19B    = "pms.sensors.winsen.mhz19b"
ZH0xx     = "pms.sensors.winsen.zh0xx"

[tool.poetry.plugins."pypms.extras"]
influxdb = "pms.extra.influxdb:cli"
mqtt     = "pms.extra.mqtt:cli"
bridge   = "pms.extra.bridge:cli"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = lint, py36, py37, py38, py39
skip_missing_interpreters = True
isolated_build = True

[testenv]
commands =
    pytest --cov {posargs}
deps =
    pytest
    pytest-cov

[testenv:lint]
skipsdist=True
commands =
    black --check .
    isort --check .
    mypy src/
deps =
    black
    isort
    mypy>=0.902
    types-dataclasses

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
"""

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -Werror"

[tool.coverage.run]
source = ["pms"]
omit = ["*/__init__.py", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@overload", "def __repr__", "def __str__"]
show_missing = true
skip_covered =  true
fail_under = 100

[tool.black]
target-version = ['py36']
line-length = 100

[tool.isort]
py_version = "37" # dataclasses in standard library
profile = "black"
src_paths = ["src", "tests"]
line_length = 100

[tool.mypy]
warn_unused_ignores = false
warn_no_return = true
warn_return_any = false
warn_unreachable = true
sqlite_cache = true
overrides = [
    { ignore_missing_imports = true, module = "paho.mqtt" },
    { ignore_missing_imports = true, module = "influxdb" },
    { ignore_missing_imports = true, module = "serial" },
    { ignore_missing_imports = true, module = "aenum" },
]
