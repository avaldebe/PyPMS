{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#about","title":"About","text":"<p><code>pms</code> is a data acquisition and logging tool for for Air Quality Sensors with UART interface.</p>"},{"location":"#installation","title":"Installation","text":"pippipx <pre><code>python3 -m pip install pypms\n</code></pre> <pre><code>pipx install pypms\n</code></pre> <p>Will allow you yo access to sensors via serial port (<code>pms serial</code>), and save observations to a csv file (<code>pms csv</code>).</p>"},{"location":"#install-with-extras","title":"Install with extras","text":"<p>Additional packages are required for pushing observations to an mqtt server (<code>pms mqtt</code>), to an influxdb server (<code>pms influxdb</code>), or provide a bridge between mqtt and influxdb servers (<code>pms bridge</code>).</p> pippipx <pre><code>python3 -m pip install pypms[mqtt,influxdb]\n</code></pre> <pre><code>pipx install pypms[mqtt,influxdb]\n</code></pre>"},{"location":"#command-line-options","title":"Command line options","text":"pmspms infopms serialpms csvpms mqttpms influxdbpms bridge <pre><code>pms --help\n</code></pre> <pre><code>Usage: pms [OPTIONS] COMMAND [ARGS]...\n\n  Data acquisition and logging for Air Quality Sensors with UART interface\n\nOptions:\n  -m, --sensor-model [HPMA115C0|HPMA115S0|MCU680|MHZ19B|PMS3003|PMS5003S|PMS5003ST|PMS5003T|PMSx003|SDS01x|SDS198|SPS30|ZH0xx]\n                                  sensor model  [default: PMSx003]\n  -s, --serial-port TEXT          serial port  [default: /dev/ttyUSB0]\n  -i, --interval INTEGER          seconds to wait between updates  [default:\n                                  60]\n\n  -n, --samples INTEGER           stop after N samples\n  --debug                         print DEBUG/logging messages  [default:\n                                  False]\n\n  -V, --version\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n\n  --help                          Show this message and exit.\n\nCommands:\n  bridge    Bridge between MQTT and InfluxDB servers\n  csv       Read sensor and print measurements\n  influxdb  Read sensor and push PM measurements to an InfluxDB server\n  info      Information about the sensor observations\n  mqtt      Read sensor and push PM measurements to a MQTT server\n  serial    Read sensor and print measurements\n</code></pre> <pre><code>pms info --help\n</code></pre> <pre><code>Usage: pms info [OPTIONS]\n\n  Information about the sensor observations\n\nOptions:\n  --help  Show this message and exit.\n</code></pre> <pre><code>pms serial --help\n</code></pre> <pre><code>Usage: pms serial [OPTIONS]\n\n  Read sensor and print formatted measurements\n\nOptions:\n  -f, --format [csv|pm|num|raw|cf|atm|hcho|co2|bme|bsec|hexdump]\n                                  formatted output\n  --decode PATH                   decode captured messages\n  --help                          Show this message and exit.\n</code></pre> <pre><code>pms csv --help\n</code></pre> <pre><code>Usage: pms csv [OPTIONS] [PATH]\n\n  Read sensor and save measurements to a CSV file\n\nArguments:\n  [PATH]  csv formatted file\n\nOptions:\n  --capture    write raw messages instead of observations  [default: False]\n  --overwrite  overwrite file, if already exists  [default: False]\n  --help       Show this message and exit.\n</code></pre> <pre><code>pms mqtt --help\n</code></pre> <pre><code>Usage: pms mqtt [OPTIONS]\n\n  Read sensor and push PM measurements to a MQTT server\n\nOptions:\n  -t, --topic TEXT     mqtt root/topic  [default: homie/test]\n  --mqtt-host TEXT     mqtt server  [default: mqtt.eclipse.org]\n  --mqtt-port INTEGER  server port  [default: 1883]\n  --mqtt-user TEXT     server username  [env var: MQTT_USER]\n  --mqtt-pass TEXT     server password  [env var: MQTT_PASS]\n  --help               Show this message and exit.\n</code></pre> <pre><code>pms influxdb --help\n</code></pre> <pre><code>Usage: pms influxdb [OPTIONS]\n\n  Read sensor and push PM measurements to an InfluxDB server\n\nOptions:\n  --db-host TEXT     database server  [default: influxdb]\n  --db-port INTEGER  server port  [default: 8086]\n  --db-user TEXT     server username  [env var: DB_USER; default: root]\n  --db-pass TEXT     server password  [env var: DB_PASS; default: root]\n  --db-name TEXT     database name  [default: homie]\n  --tags TEXT        measurement tags  [default: {\"location\": \"test\"}]\n  --help             Show this message and exit.\n</code></pre> <pre><code>pms bridge --help\n</code></pre> <pre><code>Usage: pms bridge [OPTIONS]\n\n  Bridge between MQTT and InfluxDB servers\n\nOptions:\n  --mqtt-topic TEXT    mqtt root/topic  [default: homie/+/+/+]\n  --mqtt-host TEXT     mqtt server  [default: mqtt.eclipse.org]\n  --mqtt-port INTEGER  server port  [default: 1883]\n  --mqtt-user TEXT     server username  [env var: MQTT_USER]\n  --mqtt-pass TEXT     server password  [env var: MQTT_PASS]\n  --db-host TEXT       database server  [default: influxdb]\n  --db-port INTEGER    server port  [default: 8086]\n  --db-user TEXT       server username  [env var: DB_USER; default: root]\n  --db-pass TEXT       server password  [env var: DB_PASS; default: root]\n  --db-name TEXT       database name  [default: homie]\n  --help               Show this message and exit.\n</code></pre>"},{"location":"library_usage/","title":"Use as a library","text":"<p><code>PyPMS</code>/<code>pms</code> is meant as a command line application. This section contain some help for those brave enough to use its internals as a library.</p>"},{"location":"library_usage/#basic-examples","title":"Basic examples","text":"read one sensorread two sensors <pre><code>\"\"\"\nRead PMSx003 sensor on /dev/ttyUSB0.\n\nRead 4 samples, one sample every 20 seconds,\nand print the observations on different formats.\n\"\"\"\n\nfrom pms.core import SensorReader\n\nreader = SensorReader(\"PMSx003\", \"/dev/ttyUSB0\", interval=20, samples=4)\n\nprint(\"\\nPMSx003 4 samples on default format\")\nwith reader:\n    for obs in reader():\n        print(obs)\n\nprint(\"\\nPMSx003 4 samples on CSV format\")\nwith reader:\n    for obs in reader():\n        print(f\"{obs:csv}\")\n\nprint(\"\\nPMSx003 4 samples on CSV format with header\")\nwith reader:\n    print_header = True\n    for obs in reader():\n        if print_header:\n            print(f\"{obs:header}\")\n            print_header = False\n        print(f\"{obs:csv}\")\n</code></pre> <pre><code>PMSx003 4 samples on default format\n2021-07-29 15:57:01: PM1 1.0, PM2.5 11.0, PM10 12.0 \u03bcg/m3\n2021-07-29 15:57:21: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3\n2021-07-29 15:57:41: PM1 0.0, PM2.5 1.0, PM10 2.0 \u03bcg/m3\n2021-07-29 15:58:01: PM1 0.0, PM2.5 1.0, PM10 2.0 \u03bcg/m3\n\nPMSx003 4 samples on CSV format\n1627567094, 2, 10, 12, 2.0, 10.0, 12.0, 4.35, 1.42, 0.52, 0.30, 0.00, 0.00\n1627567114, 1, 7, 7, 1.0, 7.0, 7.0, 4.53, 1.44, 0.30, 0.09, 0.00, 0.00\n1627567134, 1, 1, 2, 1.0, 1.0, 2.0, 3.27, 1.09, 0.09, 0.03, 0.03, 0.00\n1627567154, 1, 1, 2, 1.0, 1.0, 2.0, 4.65, 1.44, 0.03, 0.00, 0.00, 0.00\n\nPMSx003 4 samples on CSV format with header\ntime, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0\n1627567167, 2, 12, 15, 2.0, 12.0, 15.0, 5.70, 1.86, 0.68, 0.34, 0.00, 0.00\n1627567187, 2, 8, 8, 2.0, 8.0, 8.0, 3.39, 1.13, 0.23, 0.09, 0.00, 0.00\n1627567207, 1, 1, 1, 1.0, 1.0, 1.0, 4.26, 1.39, 0.12, 0.00, 0.00, 0.00\n1627567227, 2, 2, 2, 2.0, 2.0, 2.0, 3.63, 1.21, 0.03, 0.00, 0.00, 0.00\n</code></pre> <pre><code>\"\"\"\nRead PMSx003 sensor on /dev/ttyUSB0\nand MCU680 sensor on /dev/ttyUSB1\n\nRead 4 samples from each sensor, one sample every 20 seconds,\nand print the observations on different formats.\n\"\"\"\n\nfrom pms.core import SensorReader\n\npms = SensorReader(\"PMSx003\", \"/dev/ttyUSB0\", interval=20, samples=4)\nbme = SensorReader(\"MCU680\", \"/dev/ttyUSB1\", interval=20, samples=4)\n\n\nprint(\"\\nPMSx003 and MCU680, 4 samples each on default formats\")\nwith pms, bme:\n    for pm, bm in zip(pms(), bme()):\n        print(pm)\n        print(bm)\n\nprint(\"\\nPMSx003 and MCU680, 4 samples each on CSV format\")\nwith pms, bme:\n    for pm, bm in zip(pms(), bme()):\n        print(f\"PMSx003, {pm:csv}, MCU680, {bm:csv}\")\n\nprint(\"\\nPMSx003 and MCU680, 4 samples each on CSV format with header\")\nwith pms, bme:\n    print_header = True\n    for pm, bm in zip(pms(), bme()):\n        if print_header:\n            print(f\"PMSx003, {pm:header}, MCU680, {bm:header}\")\n            print_header = False\n        print(f\"PMSx003, {pm:csv}, MCU680, {bm:csv}\")\n</code></pre> <pre><code>PMSx003 and MCU680, 4 samples each on default formats\n2021-07-29 16:01:34: PM1 1.0, PM2.5 12.0, PM10 13.0 \u03bcg/m3\n2021-07-29 16:01:36: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 988.94 hPa, 463.6 k\u03a9\n2021-07-29 16:01:54: PM1 1.0, PM2.5 5.0, PM10 5.0 \u03bcg/m3\n2021-07-29 16:01:58: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 989.00 hPa, 464.9 k\u03a9\n2021-07-29 16:02:14: PM1 0.0, PM2.5 0.0, PM10 1.0 \u03bcg/m3\n2021-07-29 16:02:20: Temp. 25.1 \u00b0C, Rel.Hum. 48.2 %, Press 988.98 hPa, 467.2 k\u03a9\n2021-07-29 16:02:34: PM1 0.0, PM2.5 0.0, PM10 1.0 \u03bcg/m3\n2021-07-29 16:02:42: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 988.98 hPa, 467.5 k\u03a9\n\nPMSx003 and MCU680, 4 samples each on CSV format\nPMSx003, 1627567375, 1, 10, 12, 1.0, 10.0, 12.0, 4.53, 1.44, 0.56, 0.30, 0.00, 0.00, MCU680, 1627567378, 25.1, 48.2, 988.94, 257, 28, 469.8, 204\nPMSx003, 1627567395, 1, 6, 7, 1.0, 6.0, 7.0, 4.86, 1.52, 0.16, 0.09, 0.00, 0.00, MCU680, 1627567400, 25.0, 48.5, 988.98, 257, 27, 470.8, 204\nPMSx003, 1627567415, 2, 3, 3, 2.0, 3.0, 3.0, 2.37, 0.75, 0.03, 0.00, 0.00, 0.00, MCU680, 1627567421, 25.1, 48.2, 988.94, 257, 17, 475.8, 204\nPMSx003, 1627567435, 0, 0, 0, 0.0, 0.0, 0.0, 2.97, 0.92, 0.03, 0.03, 0.00, 0.00, MCU680, 1627567443, 25.0, 48.2, 989.00, 257, 27, 474.1, 203\n\nPMSx003 and MCU680, 4 samples each on CSV format with header\nPMSx003, time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0, MCU680, time, temp, rhum, pres, IAQ_acc, IAQ, gas, alt\nPMSx003, 1627567457, 1, 10, 12, 1.0, 10.0, 12.0, 4.50, 1.46, 0.60, 0.30, 0.00, 0.00, MCU680, 1627567459, 25.1, 48.2, 989.00, 257, 30, 472.8, 203\nPMSx003, 1627567477, 2, 7, 7, 2.0, 7.0, 7.0, 3.87, 1.29, 0.24, 0.09, 0.00, 0.00, MCU680, 1627567481, 25.1, 48.2, 988.94, 257, 30, 474.5, 204\nPMSx003, 1627567497, 1, 2, 2, 1.0, 2.0, 2.0, 3.06, 1.02, 0.10, 0.00, 0.00, 0.00, MCU680, 1627567503, 25.1, 48.1, 989.00, 258, 34, 473.1, 203\nPMSx003, 1627567517, 0, 0, 0, 0.0, 0.0, 0.0, 2.16, 0.72, 0.00, 0.00, 0.00, 0.00, MCU680, 1627567525, 25.1, 47.9, 988.96, 259, 50, 467.8, 204\n</code></pre>"},{"location":"library_usage/#observation-data-fields","title":"Observation data fields","text":"<p>Each sensor provides different data fields. The <code>pms -m SENSOR_MODEL info</code> command will provide information about data fields and their units. The following table shows all possible data fields and the type provided by each sensor:</p> particulate matternumber countenvironmentalother <code>--sensor-model</code> pm01 pm25 pms04 pm10 pm100 raw01 raw25 raw10 PMS3003 int int int int int int PMSx003 int int int int int int PMS5003S int int int int int int PMS5003ST int int int int int int PMS5003T int int int int int int SDS01x float float SDS198 int HPMA115S0 int int HPMA115C0 int int int int SPS30 float float float float ZH0xx int int int MHZ19B MCU680 <code>--sensor-model</code> n0_3 n0_5 n1_0 n2_5 n4_0 n5_0 n10_0 PMS3003 float float float float float float PMSx003 float float float float float float PMS5003S float float float float float float PMS5003ST float float float float float float PMS5003T float float float float SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 float float float float float ZH0xx MHZ19B MCU680 <code>--sensor-model</code> time temp rhum pres HCHO CO2 PMS3003 int PMSx003 int PMS5003S int int PMS5003ST int float float int PMS5003T int float float SDS01x int SDS198 int HPMA115S0 int HPMA115C0 int SPS30 int ZH0xx int MHZ19B int int MCU680 int float float float <code>--sensor-model</code> diam IAQ_acc IAQ gas alt PMS3003 PMSx003 PMS5003S PMS5003ST PMS5003T SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 float ZH0xx MHZ19B MCU680 int int int int <p>On the previous example, <code>obs</code> is a dataclasses.dataclass instance which an be inspected as follows</p> <pre><code>\"\"\"Inspect sensor data fields\"\"\"\n\nfrom dataclasses import fields\n\nfrom pms.core import Sensor\nfrom pms.core.types import ObsData\n\n\ndef field_types(obs: ObsData) -&gt; dict[str, str]:\n    \"\"\"return a dictionary containing the type of each data field\"\"\"\n\n    return {\n        field.name: field.type.__name__ if hasattr(field.type, \"__name__\") else str(field.type)\n        for field in fields(obs)  # type:ignore[arg-type]\n    }\n\n\nfor sensor in Sensor:\n    print(sensor)\n    print(field_types(sensor.Data))\n</code></pre> <pre><code>HPMA115C0\n{'time': 'int', 'pm01': 'int', 'pm25': 'int', 'pm04': 'int', 'pm10': 'int'}\nHPMA115S0\n{'time': 'int', 'pm25': 'int', 'pm10': 'int'}\nMCU680\n{'time': 'int', 'temp': 'float', 'rhum': 'float', 'pres': 'float', 'IAQ_acc': 'int', 'IAQ': 'int', 'gas': 'int', 'alt': 'int'}\nMHZ19B\n{'time': 'int', 'CO2': 'int'}\nPMS3003\n{'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int'}\nPMS5003S\n{'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float', 'HCHO': 'float'}\nPMS5003ST\n{'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float', 'HCHO': 'float', 'temp': 'float', 'rhum': 'float'}\nPMS5003T\n{'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'temp': 'float', 'rhum': 'float'}\nPMSx003\n{'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float'}\nSDS01x\n{'time': 'int', 'pm25': 'float', 'pm10': 'float'}\nSDS198\n{'time': 'int', 'pm100': 'int'}\nSPS30\n{'time': 'int', 'pm01': 'float', 'pm25': 'float', 'pm04': 'float', 'pm10': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n4_0': 'float', 'n10_0': 'float', 'diam': 'float'}\nZH0xx\n{'time': 'int', 'pm25': 'int', 'pm10': 'int', 'pm01': 'int'}\n</code></pre>"},{"location":"library_usage/#observation-formats","title":"Observation formats","text":"<p>As the example at the top of the page shows, the <code>obs</code> object has custom formats. Observations from different sensors support different formats. The following table shows all different formats</p> <code>--sensor-model</code> csv header pm num raw cf atm hcho co2 bme bsec PMS3003 PMSx003 PMS5003T PMS5003S PMS5003ST SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 ZH0xx MHZ19B MCU680"},{"location":"sqlite_example/","title":"SQLite examples","text":"raw sensor messagesraw sensor messages from 2 sensorssensor measurements from 2 sensors <pre><code>#!/usr/bin/env python3\n\"\"\"\nRead raw messages from a supported sensor and store them on a sqlite DB.\nAfter reading the sensor, decode all messages on DB and print them.\n\n- PMSx003 senor on /dev/ttyUSB0 by default\n- read 4 samples for each sensor, by default\n- read one sample from each sensor every 20 seconds, by default\n\"\"\"\n\nimport sqlite3\nfrom collections.abc import Iterator\nfrom contextlib import AbstractContextManager, closing, contextmanager\nfrom pathlib import Path\nfrom typing import Callable\n\nfrom typer import Argument, Option, Typer, progressbar\n\nfrom pms.core import Sensor, SensorReader, Supported\nfrom pms.core.reader import ObsData, RawData\n\napp = Typer(add_completion=False)\n\n\n@app.command()\ndef main(\n    model: Supported = Argument(Supported.default, help=\"sensor model\"),\n    port: str = Argument(\"/dev/ttyUSB0\", help=\"serial port\"),\n    db_path: Path = Argument(Path(\"pypms.sqlite\"), help=\"sensor messages DB\"),\n    samples: int = Option(4, \"--samples\", \"-n\"),\n    interval: int = Option(20, \"--interval\", \"-i\"),\n):\n    \"\"\"\n    Read raw messages from a supported sensor and store them on a sqlite DB.\n    After reading the sensor, decode all messages on DB and print them.\n    \"\"\"\n\n    # get DB context manager\n    message_db = pypms_db(db_path)\n    sensor = Sensor[model]\n\n    # read from sensor and write to DB\n    progress: Iterator[RawData]\n    msg: RawData\n    with message_db() as db, SensorReader(sensor, port, interval, samples) as reader:\n        # read one obs from each sensor at the time\n        with progressbar(reader(raw=True), length=samples, label=f\"reading {sensor}\") as progress:\n            for msg in progress:\n                write_message(db, sensor, msg)\n\n    # read and decode all `sensor` messages on the DB\n    with message_db() as db:\n        print(sensor)\n        for obs in read_obs(db, sensor):\n            print(obs)\n\n\ndef pypms_db(db_path: Path) -&gt; Callable[[], AbstractContextManager[sqlite3.Connection]]:\n    \"\"\"\n    create db and messages table, if do not exists already\n    and return a context manager for a DB connection\n    \"\"\"\n\n    @contextmanager\n    def connect() -&gt; Iterator[sqlite3.Connection]:\n        db = sqlite3.connect(str(db_path))\n        try:\n            yield db\n        except sqlite3.Error as e:\n            exit(str(e))\n        finally:\n            db.close()\n\n    create_table = \"\"\"\n        CREATE TABLE IF NOT EXISTS messages (\n            time DATETIME NOT NULL,\n            sensor TEXT NOT NULL,\n            message BLOB NOT NULL,\n            UNIQUE (time, sensor)\n        );\n        \"\"\"\n    with connect() as db, db, closing(db.cursor()) as cur:\n        cur.executescript(create_table)\n\n    return connect\n\n\ndef write_message(db: sqlite3.Connection, sensor: Sensor, message: RawData):\n    \"\"\"insert raw messages into the DB\"\"\"\n\n    insert = \"\"\"\n        INSERT OR IGNORE INTO messages (time, sensor, message)\n        VALUES (?, ?, ?);\n        \"\"\"\n    with db, closing(db.cursor()) as cur:\n        cur.execute(insert, (message.time, sensor.name, message.data))\n\n\ndef read_obs(db: sqlite3.Connection, sensor: Sensor) -&gt; Iterator[ObsData]:\n    \"\"\"read messages from DB and return decoded observations\"\"\"\n\n    select = \"\"\"\n        SELECT\n            message, time \n        FROM\n            messages \n        WHERE\n            sensor IS ? \n        ORDER BY\n            time;\n        \"\"\"\n\n    def decode(row):\n        return sensor.decode(row[0], time=row[1])\n\n    with closing(db.cursor()) as cur:\n        cur.execute(select, (sensor.name,))\n        return (decode(row) for row in cur.fetchall())\n\n\nif __name__ == \"__main__\":\n    try:\n        app()\n    except KeyboardInterrupt:\n        print(\"\")\n</code></pre> <pre><code>#!/usr/bin/env python3\n\"\"\"\nRead raw messages from 2 different sensors and store them on a sqlite DB.\nAfter reading the sensor, decode all messages on DB and print them.\n\n- PMSx003 senor on /dev/ttyUSB0\n- MCU680 sensor on /dev/ttyUSB1\n- read 4 samples for each sensor, by default\n- read one sample from each sensor every 20 seconds, by default\n\nNOTE:\nWhen reading 2 or more sensors only the timing of the first sensor is guarantied.\nIn this example, the second sensor will be read right after the first sensor.\n\"\"\"\n\nimport sqlite3\nfrom collections.abc import Iterator\nfrom contextlib import AbstractContextManager, closing, contextmanager\nfrom pathlib import Path\nfrom typing import Callable\n\nfrom typer import Argument, Option, Typer, progressbar\n\nfrom pms.core import Sensor, SensorReader\nfrom pms.core.reader import ObsData, RawData\n\napp = Typer(add_completion=False)\n\n\n@app.command()\ndef main(\n    db_path: Path = Argument(Path(\"pypms.sqlite\"), help=\"sensor messages DB\"),\n    samples: int = Option(4, \"--samples\", \"-n\"),\n    interval: int = Option(20, \"--interval\", \"-i\"),\n):\n    \"\"\"\n    Read raw messages from 2 different sensors\n    (PMSx003 on /dev/ttyUSB0 and MCU680 on /dev/ttyUSB1)\n    and store them on a sqlite DB.\n\n    After reading the sensor, decode all messages on DB and print them.\n    \"\"\"\n\n    # get DB context manager\n    message_db = pypms_db(db_path)\n\n    reader = dict(\n        pms=SensorReader(\"PMSx003\", \"/dev/ttyUSB0\", interval, samples),\n        bme=SensorReader(\"MCU680\", \"/dev/ttyUSB1\", interval, samples),\n    )\n\n    # read from each sensor and write to DB\n    with message_db() as db, reader[\"pms\"] as pms, reader[\"bme\"] as bme:\n        # read one obs from each sensor at the time\n        with progressbar(\n            zip(pms(raw=True), bme(raw=True)), length=samples, label=\"reading sensors\"\n        ) as progress:\n            for pms_obs, env_obs in progress:\n                write_message(db, pms.sensor, pms_obs)\n                write_message(db, bme.sensor, env_obs)\n\n    # read and decode all messages on the DB\n    with message_db() as db:\n        # extract obs from one sensor at the time\n        for sensor in [r.sensor for r in reader.values()]:\n            print(sensor)\n            for obs in read_obs(db, sensor):\n                print(obs)\n\n\ndef pypms_db(db_path: Path) -&gt; Callable[[], AbstractContextManager[sqlite3.Connection]]:\n    \"\"\"\n    create db and messages table, if do not exists already\n    and return a context manager for a DB connection\n    \"\"\"\n\n    @contextmanager\n    def connect() -&gt; Iterator[sqlite3.Connection]:\n        db = sqlite3.connect(str(db_path))\n        try:\n            yield db\n        except sqlite3.Error as e:\n            exit(str(e))\n        finally:\n            db.close()\n\n    create_table = \"\"\"\n        CREATE TABLE IF NOT EXISTS messages (\n            time DATETIME NOT NULL,\n            sensor TEXT NOT NULL,\n            message BLOB NOT NULL,\n            UNIQUE (time, sensor)\n        );\n        \"\"\"\n    with connect() as db, db, closing(db.cursor()) as cur:\n        cur.executescript(create_table)\n\n    return connect\n\n\ndef write_message(db: sqlite3.Connection, sensor: Sensor, message: RawData):\n    \"\"\"insert raw messages into the DB\"\"\"\n\n    insert = \"\"\"\n        INSERT OR IGNORE INTO messages (time, sensor, message)\n        VALUES (?, ?, ?);\n        \"\"\"\n    with db, closing(db.cursor()) as cur:\n        cur.execute(insert, (message.time, sensor.name, message.data))\n\n\ndef read_obs(db: sqlite3.Connection, sensor: Sensor) -&gt; Iterator[ObsData]:\n    \"\"\"read messages from DB and return decoded observations\"\"\"\n\n    select = \"\"\"\n        SELECT\n            message, time \n        FROM\n            messages \n        WHERE\n            sensor IS ? \n        ORDER BY\n            time;\n        \"\"\"\n\n    def decode(row):\n        return sensor.decode(row[0], time=row[1])\n\n    with closing(db.cursor()) as cur:\n        cur.execute(select, (sensor.name,))\n        return (decode(row) for row in cur.fetchall())\n\n\nif __name__ == \"__main__\":\n    try:\n        app()\n    except KeyboardInterrupt:\n        print(\"\")\n</code></pre> <pre><code>#!/usr/bin/env python3\n\"\"\"\nRead measurements from 2 different sensors and store them\non a sqlite DB as a \"tall table\" with a \"wide table\" view for each sensor.\nAfter reading the sensor, get all measurements from the DB amd print them by sensor.\n\n- PMSx003 senor on /dev/ttyUSB0\n- MCU680 sensor on /dev/ttyUSB1\n- read 4 samples for each sensor, by default\n- read one sample from each sensor every 20 seconds, by default\n\nNOTE:\nthe read_obs function creates a subclass of sensor.Data in order to avoid the\n__post_init__ call, as this was already tone when the sensor message was decoded.\nPlease open an issue or submit a PR i you know of a cleaner way to achieve this.\n\"\"\"\n\nimport sqlite3\nfrom collections.abc import Iterator\nfrom contextlib import AbstractContextManager, closing, contextmanager\nfrom dataclasses import asdict, dataclass, fields\nfrom pathlib import Path\nfrom typing import Callable\n\nfrom typer import Argument, Option, Typer, progressbar\n\nfrom pms.core import Sensor, SensorReader\nfrom pms.core.reader import ObsData\n\napp = Typer(add_completion=False)\n\n\n@app.command()\ndef main(\n    db_path: Path = Argument(Path(\"pypms.sqlite\"), help=\"sensor measurements DB\"),\n    samples: int = Option(4, \"--samples\", \"-n\"),\n    interval: int = Option(20, \"--interval\", \"-i\"),\n):\n    \"\"\"\n    Read measurements from 2 different sensors\n    (PMSx003 on /dev/ttyUSB0 and MCU680 on /dev/ttyUSB1)\n    and store them on a sqlite DB as a \"tall table\" with a \"wide table\" view for each sensor.\n\n    After reading the sensors, get all measurements from the DB amd print them by sensor.\n    \"\"\"\n\n    # get DB context manager\n    measurements_db = pypms_db(db_path)\n\n    reader = dict(\n        pms=SensorReader(\"PMSx003\", \"/dev/ttyUSB0\", interval, samples),\n        bme=SensorReader(\"MCU680\", \"/dev/ttyUSB1\", interval, samples),\n    )\n\n    # read from each sensor and write to DB\n    with measurements_db() as db, reader[\"pms\"] as pms, reader[\"bme\"] as bme:\n        # read one obs from each sensor at the time\n        with progressbar(zip(pms(), bme()), length=samples, label=\"reading sensors\") as progress:\n            for pms_obs, env_obs in progress:\n                write_measurements(db, pms.sensor, pms_obs)\n                write_measurements(db, bme.sensor, env_obs)\n\n    # read all measurements on the DB and reconstruct sensor.Data objects\n    with measurements_db() as db:\n        # extract obs from one sensor at the time\n        for sensor in [r.sensor for r in reader.values()]:\n            print(sensor)\n            for obs in read_obs(db, sensor):\n                print(obs)\n\n\ndef pypms_db(db_path: Path) -&gt; Callable[[], AbstractContextManager[sqlite3.Connection]]:\n    \"\"\"\n    create db and table and update sensor views, if do not exists already\n    and return a context manager for a DB connection\n    \"\"\"\n\n    @contextmanager\n    def connect() -&gt; Iterator[sqlite3.Connection]:\n        db = sqlite3.connect(str(db_path))\n        try:\n            yield db\n        except sqlite3.Error as e:\n            exit(str(e))\n        finally:\n            db.close()\n\n    create_table = \"\"\"\n        CREATE TABLE IF NOT EXISTS measurements (\n            time DATETIME NOT NULL,\n            sensor TEXT NOT NULL,\n            field TEXT NOT NULL,\n            value NUMERIC NOT NULL,\n            UNIQUE (time, sensor, field)\n        );\n        \"\"\"\n\n    with connect() as db, db, closing(db.cursor()) as cur:\n        cur.executescript(create_table)\n\n        # create a \"wide table\" view for every supported sensor\n        for sensor in Sensor:\n            view_fields = \",\\n\".join(\n                f\"MAX(CASE WHEN field='{field.name}' THEN value ELSE NULL END) {field.name}\"\n                for field in fields(sensor.Data)  # type:ignore[arg-type]\n                if field.name != \"time\"\n            )\n            sensor_view = f\"\"\"\n                CREATE VIEW IF NOT EXISTS {sensor.name} AS\n                SELECT\n                    MAX(time) time,\n                    {view_fields}\n                FROM\n                    measurements\n                WHERE\n                    sensor IS '{sensor.name}'\n                GROUP BY\n                    time\n                ORDER BY\n                    time;\n                \"\"\"\n\n            cur.executescript(sensor_view)\n\n    return connect\n\n\ndef write_measurements(db: sqlite3.Connection, sensor: Sensor, obs: ObsData):\n    \"\"\"insert raw messages into the DB\"\"\"\n    insert = \"\"\"\n        INSERT OR IGNORE INTO measurements (time, sensor, field, value)\n        VALUES (?, ?, ?, ?);\n        \"\"\"\n    values = (\n        (obs.time, sensor.name, field, value)\n        for field, value in asdict(obs).items()  # type:ignore[call-overload]\n        if field != \"time\"\n    )\n    with db, closing(db.cursor()) as cur:\n        cur.executemany(insert, values)\n\n\ndef read_obs(db: sqlite3.Connection, sensor: Sensor) -&gt; Iterator[ObsData]:\n    \"\"\"read measurements from DB and return observations\"\"\"\n\n    @dataclass\n    class NewObs(sensor.Data):  # type: ignore[name-defined]\n        def __post_init__(self):\n            \"\"\"avoid call to post-init, this was already done when the message was decoded\"\"\"\n            pass\n\n    with closing(db.cursor()) as cur:\n        cur.execute(f\"SELECT * FROM {sensor.name};\")\n        return (NewObs(*row) for row in cur.fetchall())\n\n\nif __name__ == \"__main__\":\n    try:\n        app()\n    except KeyboardInterrupt:\n        print(\"\")\n</code></pre>"},{"location":"sensors/Honeywell/","title":"Honeywell sensors","text":"<p>Warning</p> <p>This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic.</p> sensordatasheet Sensor <code>--sensor-model</code> PM1 PM2.5 PM4 PM10 HPMA115S0 HPMA115S0 HPMA115C0 HPMA115C0 Sensor Datasheet Dimensions Connector HPMA115S0 en 43x36x24 mm\u00b3 8 pin HPMA115C0 en 44X36X12 mm\u00b3 10 pin"},{"location":"sensors/Honeywell/#connector","title":"Connector","text":"8 pin10 pin <p>8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST.</p> Pin Name Voltage Function 1 VOUT 3.3V power output: max 100 mA 2 VCC 5V\u00b10.2V power input: max 600 mA, ripple &lt; 20 mV 3/4 NC not connected 5 RES reserved for future use 6 TX 3.3V TTL serial port 7 RX 3.3V TTL serial port 8 GND 0V <p>5x2 1.27mm female header: Samtec SFSD-05-28-H-5.00-SR (cable assembly) or SFM-105-02-H-D (surface mount).</p> Pin Name Voltage Function 1 VOUT 5V power output: max 300 mA 2 VCC 5V\u00b10.2V power input: max 600 mA, ripple &lt; 20 mV 3/4 GND 0V 5 RES reserved for future use 6 NC not connected 7 RX 3.3V TTL serial port 8 NC not connected 9 TX 3.3V TTL serial port 10 SET reserved for future use"},{"location":"sensors/Honeywell/#protocol","title":"Protocol","text":"<p>Serial protocol is UART 9600 8N1  3.3V TTL.</p> commandsmessageHPMA115S0HPMA115C0 <p>All the Honeywell PM sensors can be fully controlled with serial commands:</p> Command Description <code>message</code> <code>active_mode</code> continuous operation <code>68 01 40 57</code> <code>passive_mode</code> single-shot operation <code>68 01 20 77</code> <code>passive_read</code> trigger single-shot measurement <code>68 01 04 93</code> <code>sleep</code> sleep mode <code>68 01 02 95</code> <code>wake</code> wake up from sleep mode <code>68 01 01 96</code> <p>Messages containing measurements consist of unsigned short integers. The last bit of the message should contain <code>sum(message[3:-1])%0x100</code>.</p> <code>message</code> HPMA115S0 HPMA115C0 8 bits (32b on active mode) 16 bits (32b on active mode) header 3 bits 3 bits <code>40 05 04</code> <code>40 05 04</code> body 4 bits 12 bits 2 values 4 values, 2 reserved checksum 1 bit 1 bit <p>The message body (<code>message[3:7]</code>) contains 2 values:</p> <ul> <li>pm25, pm10: PM2.5, PM10 [\u03bcg/m\u00b3]</li> </ul> <p>The message body (<code>message[3:7]</code>) contains 4 values:</p> <ul> <li>pm01, pm25, pm04, pm10: PM1.0, PM2.5, PM4.0 PM10 [\u03bcg/m\u00b3]</li> </ul>"},{"location":"sensors/Honeywell/#hpma115s0","title":"HPMA115S0","text":"infoserialcsvhexdump <p>About the HPMA115S0 sensor (<code>-m HPMA115S0</code>)</p> <pre><code>pms -m HPMA115S0 info\n</code></pre> <pre><code>Honeywell HPMA115S0 sensor observations\n\ntime                                    measurement time [seconds since epoch]\npm25, pm10                              PM2.5, PM10 [\u03bcg/m3]\n\nString formats: pm (default), csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m HPMA115S0 -n 10 -i 10 serial\n</code></pre> <pre><code>\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m HPMA115S0 -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m HPMA115S0 -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sensors/Honeywell/#hpma115c0","title":"HPMA115C0","text":"infoserialcsvhexdump <p>About the HPMA115S0 sensor (<code>-m HPMA115C0</code>)</p> <pre><code>pms -m HPMA115C0 info\n</code></pre> <pre><code>Honeywell HPMA115C0 sensor observations\n\ntime                                    measurement time [seconds since epoch]\npm01, pm25, pm04, pm10                  PM1.0, PM2.5, PM4.0 PM10 [\u03bcg/m3]\n\nString formats: pm (default), csv and header    \n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m HPMA115C0 -n 10 -i 10 serial\n</code></pre> <pre><code>2021-09-24 15:46:40: PM1 4.0, PM2.5 7.0, PM4 9.0, PM10 23.0 \u03bcg/m3\n2021-09-24 15:46:50: PM1 3.0, PM2.5 4.0, PM4 4.0, PM10 4.0 \u03bcg/m3\n2021-09-24 15:47:00: PM1 4.0, PM2.5 6.0, PM4 6.0, PM10 7.0 \u03bcg/m3\n2021-09-24 15:47:10: PM1 5.0, PM2.5 6.0, PM4 6.0, PM10 7.0 \u03bcg/m3\n2021-09-24 15:47:20: PM1 4.0, PM2.5 5.0, PM4 5.0, PM10 5.0 \u03bcg/m3\n2021-09-24 15:47:30: PM1 5.0, PM2.5 6.0, PM4 6.0, PM10 8.0 \u03bcg/m3\n2021-09-24 15:48:20: PM1 5.0, PM2.5 7.0, PM4 7.0, PM10 8.0 \u03bcg/m3\n2021-09-24 15:48:30: PM1 5.0, PM2.5 7.0, PM4 7.0, PM10 8.0 \u03bcg/m3\n2021-09-24 15:48:40: PM1 4.0, PM2.5 6.0, PM4 6.0, PM10 7.0 \u03bcg/m3\n2021-09-24 15:48:50: PM1 4.0, PM2.5 6.0, PM4 7.0, PM10 8.0 \u03bcg/m3\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m HPMA115C0 -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>time, pm01, pm25, pm04, pm10\n1632491200, 4.0, 7.0, 9.0, 23.0\n1632491210, 3.0, 4.0, 4.0, 4.0\n1632491220, 4.0, 6.0, 6.0, 7.0\n1632491230, 5.0, 6.0, 6.0, 7.0\n1632491240, 4.0, 5.0, 5.0, 5.0\n1632491250, 5.0, 6.0, 6.0, 8.0\n1632491300, 5.0, 7.0, 7.0, 8.0\n1632491310, 5.0, 7.0, 7.0, 8.0\n1632491320, 4.0, 6.0, 6.0, 7.0\n1632491330, 4.0, 6.0, 7.0, 8.0\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m HPMA115C0 -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: 40 0d 04 00 04 00 07 00 09 00 17 00 00 00 00 84  @...............\n00000010: 40 0d 04 00 03 00 04 00 04 00 04 00 00 00 00 a0  @...............\n00000020: 40 0d 04 00 04 00 06 00 06 00 07 00 00 00 00 98  @...............\n00000030: 40 0d 04 00 05 00 06 00 06 00 07 00 00 00 00 97  @...............\n00000040: 40 0d 04 00 04 00 05 00 05 00 05 00 00 00 00 9c  @...............\n00000050: 40 0d 04 00 05 00 06 00 06 00 08 00 00 00 00 96  @...............\n00000060: 40 0d 04 00 05 00 07 00 07 00 08 00 00 00 00 94  @...............\n00000070: 40 0d 04 00 05 00 07 00 07 00 08 00 00 00 00 94  @...............\n00000080: 40 0d 04 00 04 00 06 00 06 00 07 00 00 00 00 98  @...............\n00000090: 40 0d 04 00 04 00 06 00 07 00 08 00 00 00 00 96  @...............\n</code></pre>"},{"location":"sensors/NovaFitness/","title":"NovaFitness sensors","text":"<p>Warning</p> <p>This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic.</p> sensordatasheet Sensor <code>--sensor-model</code> PM2.5 PM10 PM100 SDS011 SDS01x SDS018 SDS01x SDS021 SDS01x SDS198 SDS198 Sensor Datasheet Dimensions Connector SDS011 en 70x70x25 mm\u00b3 7 Pin SDS018 en 60x46x20 mm\u00b3 7 Pin SDS021 en 43x32x24 mm\u00b3 5 Pin SDS198 en 70x70x25 mm\u00b3 7 Pin"},{"location":"sensors/NovaFitness/#connector","title":"Connector","text":"5 pin7 pin <p>5 pin ????, comes with sensor</p> Pin Name Voltage Function 1 5V 4.7-5.3V &gt;1W, ripple &lt; 20 mV 2 NC not connected 3 GND 0V 4 R 3.3V TTL RX serial port 5 T 3.3V TTL TX serial port <p>7 pin JST XH (2.5mm pitch), comes with sensor</p> Pin Name Voltage Function 1 NC not connected 2 1\u03bcm 3.3V PWM PM2.5 0-999 \u03bcg/m\u00b3; reserved on SDS198 3 5V 4.7-5.3V &gt;1W, ripple &lt; 20 mV 4 2.5\u03bcm 3.3V PWM PM10 0-999 \u03bcg/m\u00b3; reserved on SDS198 5 GND 0V 6 R 3.3V TTL RX serial port 7 T 3.3V TTL TX serial port"},{"location":"sensors/NovaFitness/#protocol","title":"Protocol","text":"<p>Serial protocol is UART 9600 8N1  3.3V TTL.</p> commandsmessageSDS01xSDS198 <p>All the NovaFitness PM sensors can be fully controlled with serial commands:</p> Command Description <code>message</code> <code>active_mode</code> continuous operation <code>aa b4 02 01 00 00 00 00 00 00 00 00 00 00 00 ff ff 01 ab</code> <code>passive_mode</code> single-shot operation <code>aa b4 02 01 01 00 00 00 00 00 00 00 00 00 00 ff ff 02 ab</code> <code>passive_read</code> trigger single-shot measurement <code>aa b4 04 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 02 ab</code> <code>sleep</code> sleep mode <code>aa b4 06 01 00 00 00 00 00 00 00 00 00 00 00 ff ff 05 ab</code> <code>wake</code> wake up from sleep mode <code>aa b4 06 01 01 00 00 00 00 00 00 00 00 00 00 ff ff 06 ab</code> <p>Messages containing measurements consist of unsigned short integers. The second to last bit of the message should contain <code>sum(message[2:-2])%0x100</code>.</p> <code>message</code> SDS01x SDS198 10 bits 10 bits header 2 bits 2 bits <code>aa c0</code> <code>aa cf</code> body 6 bits 6 bits 2 values, 1 ID 1 reserved, 1 value, 1 ID checksum 1 bit 1 bit tail 1 bit 1 bit <code>ab</code> <code>ab</code> <p>The message body (<code>message[2:6]</code>) contains 2 values:</p> <ul> <li>pm25, pm10: PM2.5, PM10 [\u03bcg/m\u00b3] (raw values [0.1 \u03bcg/m\u00b3])</li> </ul> <p>The message body (<code>message[4:6]</code>) contains 1 value:</p> <ul> <li>pm100: PM100 [\u03bcg/m\u00b3]</li> </ul>"},{"location":"sensors/NovaFitness/#sds01x","title":"SDS01x","text":"infoserialcsvhexdump <p>About the sensors supported by the SDS01x protocol (<code>-m SDS01x</code>)</p> <pre><code>pms -m SDS01x info\n</code></pre> <pre><code>NovaFitness SDS011, SDS018 and SDS021 sensor observations\n\ntime                                    measurement time [seconds since epoch]\npm25, pm10                              PM2.5, PM10 [\u03bcg/m3]\n\nString formats: pm (default), csv and header    \n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m SDS01x -n 10 -i 10 serial\n</code></pre> <pre><code>2020-09-27 20:11:20: PM2.5 0.6, PM10 0.6 \u03bcg/m3\n2020-09-27 20:11:30: PM2.5 0.9, PM10 0.9 \u03bcg/m3\n2020-09-27 20:11:40: PM2.5 0.9, PM10 0.9 \u03bcg/m3\n2020-09-27 20:11:50: PM2.5 0.9, PM10 0.9 \u03bcg/m3\n2020-09-27 20:12:00: PM2.5 0.9, PM10 0.9 \u03bcg/m3\n2020-09-27 20:12:10: PM2.5 0.9, PM10 0.9 \u03bcg/m3\n2020-09-27 20:12:20: PM2.5 0.9, PM10 0.9 \u03bcg/m3\n2020-09-27 20:12:30: PM2.5 0.8, PM10 0.8 \u03bcg/m3\n2020-09-27 20:12:40: PM2.5 0.8, PM10 0.8 \u03bcg/m3\n2020-09-27 20:12:50: PM2.5 0.8, PM10 0.8 \u03bcg/m3\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m SDS01x -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>time, pm25, pm10\n1601230280, 0.6, 0.6\n1601230290, 0.9, 0.9\n1601230300, 0.9, 0.9\n1601230310, 0.9, 0.9\n1601230320, 0.9, 0.9\n1601230330, 0.9, 0.9\n1601230340, 0.9, 0.9\n1601230350, 0.8, 0.8\n1601230360, 0.8, 0.8\n1601230370, 0.8, 0.8\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m SDS01x -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: aa c0 06 00 06 00 58 d9 3d ab  ......X.=.\n0000000a: aa c0 09 00 09 00 58 d9 43 ab  ......X.C.\n00000014: aa c0 09 00 09 00 58 d9 43 ab  ......X.C.\n0000001e: aa c0 09 00 09 00 58 d9 43 ab  ......X.C.\n00000028: aa c0 09 00 09 00 58 d9 43 ab  ......X.C.\n00000032: aa c0 09 00 09 00 58 d9 43 ab  ......X.C.\n0000003c: aa c0 09 00 09 00 58 d9 43 ab  ......X.C.\n00000046: aa c0 08 00 08 00 58 d9 41 ab  ......X.A.\n00000050: aa c0 08 00 08 00 58 d9 41 ab  ......X.A.\n0000005a: aa c0 08 00 08 00 58 d9 41 ab  ......X.A.\n</code></pre>"},{"location":"sensors/NovaFitness/#sds198","title":"SDS198","text":"infoserialcsvhexdump <p>About the SDS198 sensor (<code>-m SDS198</code>)</p> <pre><code>pms -m SDS198 info\n</code></pre> <pre><code>NovaFitness SDS198 sensor observations\n\ntime                                    measurement time [seconds since epoch]\npm100                                   PM100 [\u03bcg/m3]\n\nString formats: pm (default), csv and header\n</code></pre> <p>Read 6 samples (<code>-n 6</code>), one sample every 10 seconds <code>(-i 10</code>)</p> <pre><code>pms -m SDS198 -n 6 -i 10 serial\n</code></pre> <pre><code>2020-09-09 14:58:30: PM100 16.0 \u03bcg/m3\n2020-09-09 14:58:40: PM100 19.0 \u03bcg/m3\n2020-09-09 14:58:50: PM100 22.0 \u03bcg/m3\n2020-09-09 14:59:00: PM100 26.0 \u03bcg/m3\n2020-09-09 14:59:10: PM100 20.0 \u03bcg/m3\n2020-09-09 14:59:20: PM100 1.0 \u03bcg/m3\n</code></pre> <p>Print on CSV format (-f csv)</p> <pre><code>pms -m SDS198 -n 6 -i 10 serial -f csv\n</code></pre> <pre><code>time, pm100\n1599656310, 16.0\n1599656320, 19.0\n1599656330, 22.0\n1599656340, 26.0\n1599656350, 20.0\n1599656360, 1.0\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m SDS198 -n 6 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: aa cf 0e 00 10 00 e9 05 0c ab  ..........\n0000000a: aa cf 0e 00 13 00 e9 05 0f ab  ..........\n00000014: aa cf 0c 00 16 00 e9 05 10 ab  ..........\n0000001e: aa cf 0c 00 1a 00 e9 05 14 ab  ..........\n00000028: aa cf 0b 00 14 00 e9 05 0d ab  ..........\n00000032: aa cf 06 01 01 00 e9 05 f6 ab  ..........\n</code></pre>"},{"location":"sensors/Plantower/","title":"Plantower sensors","text":"<p>Warning</p> <p>This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic.</p> sensordatasheet Sensor <code>--sensor-model</code> PM1 PM2.5 PM10 size bins Other PMS1003 PMSx003 6 PMS3003 PMS3003 No passive mode read PMS5003 PMSx003 6 PMS5003T PMS5003T 4 temp. &amp; rel.hum. PMS5003S PMS5003S 6 HCHO concentration PMS5003ST PMS5003ST 6 HCHO, temp. &amp; rel.hum. PMS7003 PMSx003 6 PMSA003 PMSx003 6 Sensor Datasheet Dimensions Connector PMS1003 en,  cn 42x65x23 mm\u00b3 8 pin PMS3003 en, cn 43x50x21 mm\u00b3 8 pin PMS5003 en,  cn 38x50x21 mm\u00b3 8 pin PMS5003T 38x50x21 mm\u00b3 8 pin PMS5003S 38x50x21 mm\u00b3 8 pin PMS5003ST 38x50x21 mm\u00b3 8 pin PMS7003 cn 37x48x12 mm\u00b3 10 pin PMSA003 cn 10 pin"},{"location":"sensors/Plantower/#connector","title":"Connector","text":"8 pin10 pin <p>8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST.</p> Pin Name Voltage Function 1 VCC 5V 2 GND 0V 3 SET 3.3V TTL wake (hight)/sleep (low) mode 4 RX 3.3V TTL serial port 5 TX 3.3V TTL serial port 6 RESET 3,3V TTL reset (low) 7/8 NC not connected <p>5x2 1.27mm female header</p> Pin Name Voltage Function 1/2 VCC 5V 3/4 GND 0V 5 RESET 3,3V TTL reset (low) 6 NC not connected 7 RX 3.3V TTL serial port 8 NC not connected 9 TX 3.3V TTL serial port 10 SET 3.3V TTL wake (hight)/sleep (low) mode"},{"location":"sensors/Plantower/#protocol","title":"Protocol","text":"<p>Serial protocol is UART 9600 8N1  3.3V TTL.</p> commandsmessagePMS3003PMSx003PMS5003TPMS5003SPMS5003ST <p>With the exception of the PMS3003, all the Plantower PM sensors can be fully controlled with serial commands:</p> Command Description <code>message</code> <code>active_mode</code> continuous operation <code>42 4D E1 00 01 01 71</code> <code>passive_mode</code> single-shot operation <code>42 4D E1 00 00 01 70</code> <code>passive_read</code> trigger single-shot measurement <code>42 4D E2 00 00 01 71</code> <code>sleep</code> sleep mode <code>42 4D E4 00 00 01 73</code> <code>wake</code> wake up from sleep mode <code>42 4D E4 00 01 01 74</code> <p>Messages containing measurements consist of unsigned short integers. The last 2 bits of the message should contain <code>sum(message[:2])</code>.</p> <code>message</code> PMS3003 PMSx003 PMS5003T PMS5003S PMS5003ST 24 bits 32 bits 32 bits 32 bits 40 bits header 4 bits 4 bits 4 bits 4 bits 4 bits <code>42 4d 00 14</code> <code>42 4d 00 1c</code> <code>42 4d 00 1c</code> <code>42 4d 00 1c</code> <code>42 4d 00 24</code> body 18 bits 26 bits 26 bits 26 bits 34 bits 6 values, 3 reserved 12 values, 1 reserved 13 values 13 values 15 values, 2 reserved checksum 2 bits 2 bits 2 bits 2 bits 2 bits <p>The message body (<code>message[4:16]</code>) contains 6 values:</p> <ul> <li>raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3]</li> <li>pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3]</li> </ul> <p>The message body (<code>message[4:28]</code>) contains 12 values:</p> <ul> <li>raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3]</li> <li>pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3]</li> <li>n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y \u03bcm [#/cm\u00b3] (raw values [#/100 cm\u00b3])</li> </ul> <p>The message body (<code>message[4:28]</code>) contains 12 values:</p> <ul> <li>raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3]</li> <li>pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3]</li> <li>n0_3, n0_5, n1_0, n2_5: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3])</li> <li>temp: temperature [\u00b0C]</li> <li>rhum: relative humidity [%]</li> </ul> <p>The message body (<code>message[4:30]</code>) contains 13 values:</p> <ul> <li>raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3]</li> <li>pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3]</li> <li>n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3])</li> <li>HCHO: concentration of formaldehyde [\u03bcg/m\u00b3]</li> </ul> <p>The message body (<code>message[4:34]</code>) contains 15 values:</p> <ul> <li>raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3]</li> <li>pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3]</li> <li>n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3])</li> <li>HCHO: concentration of formaldehyde [\u03bcg/m\u00b3]</li> <li>temp: temperature [\u00b0C]</li> <li>rhum: relative humidity [%]</li> </ul>"},{"location":"sensors/Plantower/#pms3003","title":"PMS3003","text":"<p>Note</p> <p>This sensors does not support passive mode sampling</p> infoserialcsvhexdump <p>About the PMS3003 sensor (<code>-m PMS3003</code>)</p> <pre><code>pms -m PMS3003 info\n</code></pre> <pre><code>Plantower PMS3003 sensor observations\n\ntime                                    measurement time [seconds since epoch]\nraw01, raw25, raw10                     cf=1 PM estimates [\u03bcg/m3]\npm01, pm25, pm10                        PM1.0, PM2.5, PM10 [\u03bcg/m3]\n\nString formats: pm (default), raw, cf, csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m PMS3003 -n 10 -i 10 serial\n</code></pre> <pre><code>2020-09-27 17:16:10: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3\n2020-09-27 17:16:20: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3\n2020-09-27 17:16:30: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3\n2020-09-27 17:16:40: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3\n2020-09-27 17:16:50: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3\n2020-09-27 17:17:00: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3\n2020-09-27 17:17:10: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3\n2020-09-27 17:17:20: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3\n2020-09-27 17:17:30: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3\n2020-09-27 17:17:40: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m PMS3003 -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>time, raw01, raw25, raw10, pm01, pm25, pm10\n1601219770, 0, 0, 0, 0.0, 0.0, 0.0\n1601219780, 0, 0, 0, 0.0, 0.0, 0.0\n1601219790, 0, 0, 0, 0.0, 0.0, 0.0\n1601219800, 0, 0, 0, 0.0, 0.0, 0.0\n1601219810, 1, 1, 1, 1.0, 1.0, 1.0\n1601219820, 1, 1, 1, 1.0, 1.0, 1.0\n1601219830, 1, 1, 1, 1.0, 1.0, 1.0\n1601219840, 0, 0, 0, 0.0, 0.0, 0.0\n1601219850, 0, 0, 0, 0.0, 0.0, 0.0\n1601219860, 0, 0, 0, 0.0, 0.0, 0.0\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m PMS3003 -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4  BM...................Q..\n00000018: 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4  BM...................Q..\n00000030: 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4  BM...................Q..\n00000048: 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4  BM...................Q..\n00000060: 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa  BM...................Q..\n00000078: 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa  BM...................Q..\n00000090: 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa  BM...................Q..\n000000a8: 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4  BM...................Q..\n000000c0: 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4  BM...................Q..\n000000d8: 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4  BM...................Q..\n</code></pre>"},{"location":"sensors/Plantower/#pmsx003","title":"PMSx003","text":"infoserialcsvhexdump <p>About the sensors supported by the PMSx003 protocol (<code>-m PMSx003</code>)</p> <pre><code>pms -m PMSx003 info\n</code></pre> <pre><code>Plantower PMS1003, PMS5003, PMS7003 and PMSA003 sensor observations\n\ntime                                    measurement time [seconds since epoch]\nraw01, raw25, raw10                     cf=1 PM estimates [\u03bcg/m3]\npm01, pm25, pm10                        PM1.0, PM2.5, PM10 [\u03bcg/m3]\nn0_3, n0_5, n1_0, n2_5, n5_0, n10_0     number concentrations over X.Y um [#/cm3]\n\nString formats: pm (default), raw, cf, num, csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m PMSx003 -n 10 -i 10 serial\n</code></pre> <pre><code>2020-09-27 17:16:10: PM1 0.0, PM2.5 8.0, PM10 8.0 \u03bcg/m3\n2020-09-27 17:16:20: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3\n2020-09-27 17:16:30: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3\n2020-09-27 17:16:40: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3\n2020-09-27 17:16:50: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3\n2020-09-27 17:17:00: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3\n2020-09-27 17:17:10: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3\n2020-09-27 17:17:20: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3\n2020-09-27 17:17:30: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3\n2020-09-27 17:17:40: PM1 0.0, PM2.5 5.0, PM10 5.0 \u03bcg/m3\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m PMSx003 -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0\n1601219770, 0, 8, 8, 0.0, 8.0, 8.0, 2.10, 0.70, 0.45, 0.30, 0.00, 0.00\n1601219780, 0, 7, 7, 0.0, 7.0, 7.0, 2.10, 0.70, 0.45, 0.30, 0.00, 0.00\n1601219790, 0, 7, 7, 0.0, 7.0, 7.0, 1.89, 0.63, 0.42, 0.27, 0.00, 0.00\n1601219800, 0, 7, 7, 0.0, 7.0, 7.0, 1.80, 0.60, 0.39, 0.24, 0.00, 0.00\n1601219810, 0, 7, 7, 0.0, 7.0, 7.0, 1.80, 0.60, 0.39, 0.24, 0.00, 0.00\n1601219820, 0, 6, 6, 0.0, 6.0, 6.0, 1.80, 0.60, 0.29, 0.21, 0.00, 0.00\n1601219830, 0, 6, 6, 0.0, 6.0, 6.0, 1.80, 0.60, 0.29, 0.21, 0.00, 0.00\n1601219840, 0, 6, 6, 0.0, 6.0, 6.0, 1.59, 0.53, 0.26, 0.18, 0.00, 0.00\n1601219850, 0, 6, 6, 0.0, 6.0, 6.0, 1.59, 0.53, 0.26, 0.18, 0.00, 0.00\n1601219860, 0, 5, 5, 0.0, 5.0, 5.0, 1.38, 0.46, 0.23, 0.15, 0.00, 0.00\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m PMSx003 -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: 42 4d 00 1c 00 00 00 08 00 08 00 00 00 08 00 08 00 d2 00 46 00 2d 00 1e 00 00 00 00 97 00 02 c5  BM.................F.-..........\n00000020: 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 d2 00 46 00 2d 00 1e 00 00 00 00 97 00 02 c1  BM.................F.-..........\n00000040: 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 bd 00 3f 00 2a 00 1b 00 00 00 00 97 00 02 9f  BM.................?.*..........\n00000060: 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 b4 00 3c 00 27 00 18 00 00 00 00 97 00 02 8d  BM.................&lt;.'..........\n00000080: 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 b4 00 3c 00 27 00 18 00 00 00 00 97 00 02 8d  BM.................&lt;.'..........\n000000a0: 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 b4 00 3c 00 1d 00 15 00 00 00 00 97 00 02 7c  BM.................&lt;...........|\n000000c0: 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 b4 00 3c 00 1d 00 15 00 00 00 00 97 00 02 7c  BM.................&lt;...........|\n000000e0: 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 9f 00 35 00 1a 00 12 00 00 00 00 97 00 02 5a  BM.................5...........Z\n00000100: 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 9f 00 35 00 1a 00 12 00 00 00 00 97 00 02 5a  BM.................5...........Z\n00000120: 42 4d 00 1c 00 00 00 05 00 05 00 00 00 05 00 05 00 8a 00 2e 00 17 00 0f 00 00 00 00 97 00 02 34  BM.............................4\n</code></pre>"},{"location":"sensors/Plantower/#pms5003t","title":"PMS5003T","text":"infoserialcsvhexdump <p>About the PMS5003T sensor (<code>-m PMS5003T</code>)</p> <pre><code>pms -m PMS5003T info\n</code></pre> <pre><code>Plantower PMS5003T sensor observations\n\ntime                                    measurement time [seconds since epoch]\nraw01, raw25, raw10                     cf=1 PM estimates [\u03bcg/m3]\npm01, pm25, pm10                        PM1.0, PM2.5, PM10 [\u03bcg/m3]\nn0_3, n0_5, n1_0, n2_5                  number concentrations over X.Y um [#/cm3]\ntemp                                    temperature [\u00b0C]\nrhum                                    relative humidity [%]\n\nString formats: pm (default), raw, cf, num, atm, csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m PMS5003T -n 10 -i 10 serial\n</code></pre> <pre><code>2021-02-02 07:27:57: PM1 22.0, PM2.5 35.0, PM10 41.0 \u03bcg/m3\n2021-02-02 07:28:07: PM1 20.0, PM2.5 33.0, PM10 36.0 \u03bcg/m3\n2021-02-02 07:28:17: PM1 20.0, PM2.5 34.0, PM10 38.0 \u03bcg/m3\n2021-02-02 07:28:27: PM1 19.0, PM2.5 32.0, PM10 42.0 \u03bcg/m3\n2021-02-02 07:28:37: PM1 22.0, PM2.5 35.0, PM10 38.0 \u03bcg/m3\n2021-02-02 07:28:47: PM1 21.0, PM2.5 34.0, PM10 39.0 \u03bcg/m3\n2021-02-02 07:28:57: PM1 21.0, PM2.5 33.0, PM10 42.0 \u03bcg/m3\n2021-02-02 07:29:07: PM1 22.0, PM2.5 34.0, PM10 45.0 \u03bcg/m3\n2021-02-02 07:29:17: PM1 20.0, PM2.5 32.0, PM10 44.0 \u03bcg/m3\n2021-02-02 07:29:27: PM1 19.0, PM2.5 32.0, PM10 43.0 \u03bcg/m3\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m PMS5003T -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, temp, rhum\n1612247277, 23, 39, 41, 22.0, 35.0, 41.0, 41.04, 11.93, 2.78, 0.12, 21.2, 22.4\n1612247287, 21, 36, 36, 20.0, 33.0, 36.0, 35.28, 10.55, 2.28, 0.14, 21.2, 22.4\n1612247297, 21, 37, 38, 20.0, 34.0, 38.0, 38.40, 11.26, 2.50, 0.22, 21.2, 22.4\n1612247307, 20, 35, 42, 19.0, 32.0, 42.0, 37.50, 10.79, 2.62, 0.30, 21.2, 22.3\n1612247317, 23, 38, 38, 22.0, 35.0, 38.0, 38.16, 11.22, 2.86, 0.14, 21.2, 22.4\n1612247327, 22, 37, 39, 21.0, 34.0, 39.0, 38.37, 11.14, 2.88, 0.20, 21.2, 22.3\n1612247337, 22, 36, 42, 21.0, 33.0, 42.0, 37.59, 11.10, 2.82, 0.22, 21.2, 22.3\n1612247347, 23, 37, 45, 22.0, 34.0, 45.0, 38.37, 11.35, 2.92, 0.22, 21.3, 22.2\n1612247357, 21, 35, 44, 20.0, 32.0, 44.0, 37.86, 11.14, 2.86, 0.24, 21.3, 22.2\n1612247367, 20, 34, 43, 19.0, 32.0, 43.0, 36.03, 10.44, 2.72, 0.30, 21.3, 22.3\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m PMS5003T -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: 42 4d 00 1c 00 17 00 27 00 29 00 16 00 23 00 29 10 08 04 a9 01 16 00 0c 00 d4 00 e0 9a 00 04 aa  BM.....'.)...#.)................\n00000020: 42 4d 00 1c 00 15 00 24 00 24 00 14 00 21 00 24 0d c8 04 1f 00 e4 00 0e 00 d4 00 e0 9a 00 05 99  BM.....$.$...!.$................\n00000040: 42 4d 00 1c 00 15 00 25 00 26 00 14 00 22 00 26 0f 00 04 66 00 fa 00 16 00 d4 00 e0 9a 00 05 3e  BM.....%.&amp;...\".&amp;...f...........&gt;\n00000060: 42 4d 00 1c 00 14 00 23 00 2a 00 13 00 20 00 2a 0e a6 04 37 01 06 00 1e 00 d4 00 df 9a 00 04 ca  BM.....#.*... .*...7............\n00000080: 42 4d 00 1c 00 17 00 26 00 26 00 16 00 23 00 26 0e e8 04 62 01 1e 00 0e 00 d4 00 e0 9a 00 05 44  BM.....&amp;.&amp;...#.&amp;...b...........D\n000000a0: 42 4d 00 1c 00 16 00 25 00 27 00 15 00 22 00 27 0e fd 04 5a 01 20 00 14 00 d4 00 df 9a 00 05 56  BM.....%.'...\".'...Z. .........V\n000000c0: 42 4d 00 1c 00 16 00 24 00 2a 00 15 00 21 00 2a 0e af 04 56 01 1a 00 16 00 d4 00 df 9a 00 05 04  BM.....$.*...!.*...V............\n000000e0: 42 4d 00 1c 00 17 00 25 00 2d 00 16 00 22 00 2d 0e fd 04 6f 01 24 00 16 00 d5 00 de 9a 00 05 7f  BM.....%.-...\".-...o.$..........\n00000100: 42 4d 00 1c 00 15 00 23 00 2c 00 14 00 20 00 2c 0e ca 04 5a 01 1e 00 18 00 d5 00 de 9a 00 05 29  BM.....#.,... .,...Z...........)\n00000120: 42 4d 00 1c 00 14 00 22 00 2b 00 13 00 20 00 2b 0e 13 04 14 01 10 00 1e 00 d5 00 df 9a 00 04 20  BM.....\".+... .+............... \n</code></pre>"},{"location":"sensors/Plantower/#pms5003s","title":"PMS5003S","text":"infoserialcsvhexdump <p>About the PMS5003S sensor (<code>-m PMS5003S</code>)</p> <pre><code>pms -m PMS5003S info\n</code></pre> <pre><code>Plantower PMS5003S sensor observations\n\ntime                                    measurement time [seconds since epoch]\nraw01, raw25, raw10                     cf=1 PM estimates [\u03bcg/m3]\npm01, pm25, pm10                        PM1.0, PM2.5, PM10 [\u03bcg/m3]\nn0_3, n0_5, n1_0, n2_5, n5_0, n10_0     number concentrations over X.Y um [#/cm3]\nHCHO                                    formaldehyde concentration [mg/m3]\n\nString formats: pm (default), raw, cf, num, hcho, csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m PMS5003S -n 10 -i 10 serial\n</code></pre> <pre><code>\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m PMS5003S -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m PMS5003S -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sensors/Plantower/#pms5003st","title":"PMS5003ST","text":"infoserialcsvhexdump <p>About the PMS5003ST sensor (<code>-m PMS5003ST</code>)</p> <pre><code>pms -m PMS5003ST info\n</code></pre> <pre><code>Plantower PMS5003ST sensor observations\n\ntime                                    measurement time [seconds since epoch]\nraw01, raw25, raw10                     cf=1 PM estimates [\u03bcg/m3]\npm01, pm25, pm10                        PM1.0, PM2.5, PM10 [\u03bcg/m3]\nn0_3, n0_5, n1_0, n2_5, n5_0, n10_0     number concentrations over X.Y um [#/cm3]\nHCHO                                    formaldehyde concentration [mg/m3]\ntemp                                    temperature [\u00b0C]\nrhum                                    relative humidity [%]\n\nString formats: pm (default), raw, cf, num, hcho, atm, csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m PMS5003ST -n 10 -i 10 serial\n</code></pre> <pre><code>\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m PMS5003ST -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m PMS5003ST -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sensors/Sensirion/","title":"Sensirion sensors","text":"sensordatasheet Sensor <code>--sensor-model</code> PM1 PM2.5 PM4 PM10 size bins Other SPS30 SPS30 5 typical particle size Sensor Datasheet Dimensions Connector SPS30 en 5 pin"},{"location":"sensors/Sensirion/#connector","title":"Connector","text":"5 pin <p>5 pin JST ZH (1.50mm pitch)</p> Pin Name Voltage Function 1 VDD 5V\u00b110% 2 RX/SDA 3.3V/5V TTL serial port/I2C 3 TX/SCL 3.3V/5V TTL serial port/I2C 4 SEL floating/GND floating for UART, GND for I2C 5 GND 0V"},{"location":"sensors/Sensirion/#protocol","title":"Protocol","text":"<p>Serial protocol is UART 115200 8N1 5V TTL  3.3V compatible.</p> commandsmessageSPS30 <p>Note</p> <p>The SPS30 only support continuous operation, at about one measurement per second. However, new measurements are not streamed. Each measurement has to be requested. This behavior is consistent with <code>passive_mode</code>/single-shot operation in other sensors.</p> <p>The <code>sleep</code>/<code>wake</code> commands listed here (stop measurement/start measurement on the datasheet), behave consistently with the rest of the supported PM sensors. There are also <code>deep-sleep</code>/<code>wake-up</code> commands (sleep/wake-up on the datasheet), which are not implemented. As <code>deep-sleep</code> disable the UART interface and <code>wake-up</code> is a 2 stage procedure.</p> Command Description <code>message</code> <code>active_mode</code> continuous operation N/A <code>passive_mode</code> single-shot operation N/A <code>passive_read</code> request last measurement <code>7E 00 03 00 FC 7E</code> <code>sleep</code> idle mode <code>7E 00 01 00 FE 7E</code> <code>wake</code> wake up from idle mode <code>7E 00 00 02 01 03 F9 7E</code> <p>Messages containing measurements consist of floats. The second to last bit of the message should contain <code>0xFF-sum(message[1:-2])%0x100</code>.</p> <code>message</code> SPS30 47 bits header 5 bits <code>7E 00 03 00 28</code> body 40 bits 10 values checksum 1 bit tail 1 bit <code>7E</code> <p>The message body (<code>message[5:-2]</code>) contains 10 values:</p> <ul> <li>pm01, pm25, pm04, pm10: PM1.0, PM2.5, PM4.0, PM10 [ug/m\u00b3]</li> <li>n0_5, n1_0, n2_5, n4_0, n10_0: number concentrations under X.Y um [#/cm\u00b3]</li> <li>diam: typical particle size [\u03bcm]</li> </ul>"},{"location":"sensors/Sensirion/#sps30","title":"SPS30","text":"infoserialcsvhexdump <p>About the SPS30 sensor (<code>-m SPS30</code>)</p> <pre><code>pms -m SPS30 info\n</code></pre> <pre><code>Sensirion SPS30 sensor observations\n\ntime                                    measurement time [seconds since epoch]\npm01, pm25, pm04, pm10                  PM1.0, PM2.5, PM4.0, PM10 [\u03bcg/m3]\nn0_5, n1_0, n2_5, n4_0, n10_0           number concentrations between 0.3 and X.Y um [#/cm3]\ndiam                                    typical particle size [\u03bcm]\n\nString formats: pm (default), num, diam, csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m SPS30 -n 10 -i 10 serial\n</code></pre> <pre><code>2021-09-07 07:05:00: PM1 5.2, PM2.5 9.5, PM4 12.6, PM10 13.3 \u03bcg/m3\n2021-09-07 07:05:10: PM1 5.8, PM2.5 8.2, PM4 9.9, PM10 10.2 \u03bcg/m3\n2021-09-07 07:05:20: PM1 7.0, PM2.5 9.1, PM4 10.5, PM10 10.8 \u03bcg/m3\n2021-09-07 07:05:30: PM1 7.8, PM2.5 9.9, PM4 11.2, PM10 11.5 \u03bcg/m3\n2021-09-07 07:05:40: PM1 8.3, PM2.5 10.5, PM4 11.8, PM10 12.1 \u03bcg/m3\n2021-09-07 07:05:50: PM1 8.2, PM2.5 10.2, PM4 11.4, PM10 11.7 \u03bcg/m3\n2021-09-07 07:06:40: PM1 8.4, PM2.5 10.4, PM4 11.6, PM10 11.8 \u03bcg/m3\n2021-09-07 07:05:10: PM1 8.5, PM2.5 10.4, PM4 11.5, PM10 11.7 \u03bcg/m3\n2021-09-07 07:07:00: PM1 8.8, PM2.5 10.7, PM4 11.8, PM10 12.1 \u03bcg/m3\n2021-09-07 07:07:10: PM1 8.5, PM2.5 10.3, PM4 11.4, PM10 11.6 \u03bcg/m3\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m SPS30 -n 10 -i 10 csv\n</code></pre> <pre><code>time, pm01, pm25, pm04, pm10, n0_5, n1_0, n2_5, n4_0, n10_0, diam\n1630991100, 5.2, 9.5, 12.6, 13.3, 26.31, 37.00, 41.52, 42.41, 42.54, 0.8\n1630991110, 5.8, 8.2, 9.9, 10.2, 35.09, 43.75, 46.20, 46.67, 46.75, 0.8\n1630991120, 7.0, 9.1, 10.5, 10.8, 44.12, 53.44, 55.51, 55.91, 55.97, 0.8\n1630991130, 7.8, 9.9, 11.2, 11.5, 50.39, 60.42, 62.40, 62.78, 62.84, 0.7\n1630991140, 8.3, 10.5, 11.8, 12.1, 53.64, 64.24, 66.29, 66.68, 66.75, 0.7\n1630991150, 8.2, 10.2, 11.4, 11.7, 53.40, 63.68, 65.56, 65.91, 65.97, 0.7\n1630991200, 8.4, 10.4, 11.6, 11.8, 54.85, 65.26, 67.09, 67.44, 67.50, 0.7\n1630991210, 8.5, 10.4, 11.5, 11.7, 55.52, 65.91, 67.66, 68.00, 68.05, 0.7\n1630991220, 8.8, 10.7, 11.8, 12.1, 57.40, 68.09, 69.87, 70.21, 70.27, 0.7\n1630991230, 8.5, 10.3, 11.4, 11.6, 55.63, 65.90, 67.56, 67.88, 67.94, 0.7\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m SPS30 -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: 7e 00 03 00 28 40 a7 83 20 41 17 77 bb 41 4a 5f 83 41 54 8d dd 41 d2 83 3e 42 7d 33 fc 85 42 26 17 22 42 29 a4 d9 42 2a 29 bc 3f 55 b7 e7 9e 7e  ....(@.. A.w.AJ_.AT..A..&gt;B}3..B&amp;.\"B)..B*).?U....\n0000002f: 7e 00 03 00 28 40 b9 c6 7f 41 03 6c 8b 41 1e 4a e2 41 23 aa 92 42 0c 5b 7c 42 2e fd ba 42 38 ca b3 42 3a b2 c9 42 3a fd e9 3f 4a 10 25 d6 7e  ....(@...A.l.A.J.A#..B.[|B...B8..B:..B:..?J.%..\n00000064: 7e 00 03 00 28 40 df 03 da 41 7d 31 62 ae 41 27 9e 32 41 2c 10 7d 5e 42 30 7d 5e d3 42 55 c0 4c 42 5e 09 08 42 5f a2 8a 42 5f e4 43 3f 40 fa 1f ff 7e  ....(@...A}1b.A'.2A,.}^B0}^.BU.LB^..B_..B_.C?@....\n00000090: 7e 00 03 00 28 40 fa 9f ee 41 1e 6a 7d 33 41 33 60 81 41 37 91 cd 42 49 8e c8 42 71 b1 18 42 79 9a b4 42 7b 20 1b 42 7b 60 21 3f 3c a4 c4 87 7e  ....(@...A.j}3A3`.A7..BI..Bq..By..B{ .B{`!?&lt;....\n000000c0: 7e 00 03 00 28 41 05 1c 4c 41 27 8b 14 41 3d 38 59 41 41 8e 35 42 56 92 6c 42 80 79 7c 42 84 93 12 42 85 5c b2 42 85 7d 5d fb 3f 3e 67 ea 31 7e  ....(A..LA'..A=8YAA.5BV.lB.y|B...B.\\.B.}].?&gt;g.1.\n000000f5: 7e 00 03 00 28 41 03 9f 9e 41 23 7d 5e 0b 41 37 29 dc 41 3b 18 f8 42 55 95 4a 42 7d 5e ba 00 42 83 1c 73 42 83 d4 4c 42 83 f3 10 3f 3e 00 79 76 7e  ....(A...A#}^.A7).A;..BU.JB}^..B..sB..LB...?&gt;.yv.\n00000120: 7e 00 03 00 28 41 06 b1 47 41 26 09 7d 5d 41 39 24 19 41 3c f6 37 42 5b 61 d6 42 82 85 77 42 86 2d ad 42 86 e0 ca 42 86 ff 03 3f 3d 19 e5 5b 7e  ....(A..GA&amp;.}]A9$.A&lt;.7B[a.B..wB.-.B...B...?=..[.\n00000149: 7e 00 03 00 28 41 07 d4 61 41 26 1c 2a 41 38 4c cf 41 3b f0 1a 42 5e 17 d0 42 83 d2 21 42 87 52 70 42 87 fd 97 42 88 1a c2 3f 3e 47 c7 38 7e  ....(A..aA&amp;.*A8L.A;..B^..B..!B.RpB...B...?&gt;G.8.\n00000178: 7e 00 03 00 28 41 0c 43 87 41 2b 1e da 41 3d 92 1e 41 41 42 bc 42 65 9c 10 42 88 2f 76 42 8b be 32 42 8c 6c 00 42 8c 89 b8 3f 3e 5a 83 89 7e  ....(A.C.A+..A=..AAB.Be..B./vB..2B.l.B...?&gt;Z...\n000001a7: 7e 00 03 00 28 41 07 9f e5 41 24 a7 bf 41 35 d7 db 41 39 47 db 42 5e 89 35 42 83 cd 07 42 87 20 a7 42 87 c2 f8 42 87 de e9 3f 3d be a6 ff 7e  ....(A...A$..A5..A9G.B^.5B...B. .B...B...?=....\n</code></pre>"},{"location":"sensors/Winsen/","title":"Winsen sensors","text":"<p>Warning</p> <p>This sensors are 3.3V devices. They require 5V power to operate. However, on some sensors the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic.</p> sensordatasheet Sensor <code>--sensor-model</code> PM1 PM2.5 PM10 CO2 MH-Z19B MHZ19B ZH03B ZH0xx ZH06-I ZH0xx Sensor Datasheet Dimensions Connector MH-Z19B en 40\u00d720\u00d79 mm\u00b3 7 pin ZH03B en 50x32x21 mm\u00b3 8 pin ZH06-I en 47\u00d737\u00d712 mm\u00b3 8 pin"},{"location":"sensors/Winsen/#connector","title":"Connector","text":"7 pin8 pin <p>7 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST.</p> Pin Name Voltage Function 1/2 reserved 3 GND 0V 4 VCC 5V 5 RX 3.3V TTL serial port 6 TX 3.3V TTL serial port 7 reserved <p>8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST.</p> Pin Name Voltage Function 1 VCC 5V 2 GND 0V 3 reserved 4 RX 3.3V TTL serial port 5 TX 3.3V TTL serial port 6/7 NC reserved 8 PWM 3.3V PWM PM2.5 0-1000 \u03bcg/m\u00b3"},{"location":"sensors/Winsen/#protocol","title":"Protocol","text":"<p>Serial protocol is UART 9600 8N1  3.3V TTL.</p> <p>Note</p> <p>The MHZ19B datasheet advertized interface as 5V tolerant. However, the this sensor has only been tested with a 3.3V interface.</p> <p>The datasheet also mentions that this sensor needs to warm up for 180 s. Therefore, no measurements will be requested until the warm up period is completed.</p> commandsmessageMHZ19BZH0xx Command <code>--sensor-model</code> Description <code>message</code> <code>active_mode</code> ZH0xx continuous operation <code>FF 01 78 40 00 00 00 00 47</code> <code>passive_mode</code> ZH0xx &amp; MHZ19B single-shot operation <code>FF 01 78 41 00 00 00 00 46</code> <code>passive_read</code> ZH0xx trigger single-shot measurement <code>FF 01 86 00 00 00 00 00 79</code> <code>sleep</code> ZH0xx sleep mode <code>FF 01 A7 01 00 00 00 00 57</code> <code>wake</code> ZH0xx wake up from sleep mode <code>FF 01 A7 00 00 00 00 00 58</code> MHZ19B 400 ppm CO2 (zero point) calibration <code>FF 01 87 00 00 00 00 00 78</code> MHZ19B 1000 ppm CO2 (span point) calibration <code>FF 01 88 03 E8 00 00 00 8C</code> MHZ19B 2000 ppm CO2 (span point) calibration <code>FF 01 88 07 D0 00 00 00 A0</code> <p>Messages containing measurements consist of unsigned short integers. The last bit of the message should contain <code>0x100 - sum(message[1:-1]) % 0x100</code>.</p> <code>message</code> MHZ19B ZH0xx 9 bits 9 header 2 bits 2 bits <code>FF 86</code> <code>FF 86</code> body 6 bits 6 bits 1 values, 2 reserved 3 values checksum 1 bit 1 bit <p>The message body (<code>message[2:4]</code>) contains 1 value:</p> <ul> <li>co2: CO2 concentration [ppm]</li> </ul> <p>The message body (<code>message[2:8]</code>) contains 3 values:</p> <ul> <li>pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3]</li> </ul>"},{"location":"sensors/Winsen/#mhz19b","title":"MHZ19B","text":"infoserialcsvhexdump <p>About the MHZ19B sensor (<code>-m MHZ19B</code>)</p> <pre><code>pms -m MHZ19B info\n</code></pre> <pre><code>Winsen MH-Z19B sensor observations\n\ntime                                    measurement time [seconds since epoch]\nCO2                                     CO2 concentration [ppm]\n\nString formats: co2 (default), csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m MHZ19B -n 10 -i 10 serial\n</code></pre> <pre><code>2021-07-04 19:17:36: CO2 636 ppm\n2021-07-04 19:17:46: CO2 636 ppm\n2021-07-04 19:17:56: CO2 636 ppm\n2021-07-04 19:18:06: CO2 636 ppm\n2021-07-04 19:18:16: CO2 636 ppm\n2021-07-04 19:18:26: CO2 636 ppm\n2021-07-04 19:18:36: CO2 636 ppm\n2021-07-04 19:18:46: CO2 636 ppm\n2021-07-04 19:18:56: CO2 635 ppm\n2021-07-04 19:19:06: CO2 633 ppm\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m MHZ19B -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>time, CO2\n1625419056, 636\n1625419066, 636\n1625419076, 636\n1625419086, 636\n1625419096, 636\n1625419106, 636\n1625419116, 636\n1625419126, 636\n1625419136, 635\n1625419146, 633\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m MHZ19B -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: ff 86 02 7c 42 00 00 00 ba  ...|B....\n00000009: ff 86 02 7c 42 00 00 00 ba  ...|B....\n00000012: ff 86 02 7c 42 00 00 00 ba  ...|B....\n0000001b: ff 86 02 7c 42 00 00 00 ba  ...|B....\n00000024: ff 86 02 7c 42 00 00 00 ba  ...|B....\n0000002d: ff 86 02 7c 42 00 00 00 ba  ...|B....\n00000036: ff 86 02 7c 42 00 00 00 ba  ...|B....\n0000003f: ff 86 02 7c 42 00 00 00 ba  ...|B....\n00000048: ff 86 02 7b 42 00 00 00 bb  ...{B....\n00000051: ff 86 02 79 42 00 00 00 bd  ...yB....\n</code></pre>"},{"location":"sensors/Winsen/#zh0xx","title":"ZH0xx","text":"infoserialcsvhexdump <p>About the sensors supported by the ZH0xx protocol (<code>-m ZH0xx</code>)</p> <pre><code>pms -m ZH0xx info\n</code></pre> <pre><code>Winsen ZH03B and ZH06-I sensor observations\n\ntime                                    measurement time [seconds since epoch]\npm01, pm25, pm10                        PM1.0, PM2.5, PM10 [\u03bcg/m3]\n\nString formats: pm (default), csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m ZH0xx -n 10 -i 10 serial\n</code></pre> <pre><code>\n</code></pre> <p>Print on CSV format (<code>-f csv</code>)</p> <pre><code>pms -m ZH0xx -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m ZH0xx -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>\n</code></pre>"},{"location":"sensors/mcu680/","title":"Bosch Sensortec sensors","text":""},{"location":"sensors/mcu680/#bme680","title":"BME680","text":"sensormodule <p>The BME680 sensor from Bosch Sensortec measures relative humidity, barometric pressure, ambient temperature and gas (VOC). The open source driver provides raw measurements, such as the resistance of the gas sensing element.</p> <p>The heater element of gas sensor affects the temperature and humidity measurements. Compensated temperature and humidity measurements are available trough a closed source integration library (BSEC). The BSEC provides three air quality estimates derived from raw measurements:</p> <ul> <li>index of air quality (IAQ, 0-500);</li> <li>CO2 equivalent (eCO2, ppm);</li> <li>breath VOC (bVOC), ppm).</li> </ul> <p>Info</p> <p>For easy of use BSEC is also provided as an Arduino library, which can be installed using the platformio library manager as follows:</p> <pre><code>pio lib install \"BSEC Software Library\"\n</code></pre> <p>The GY-MCU680v1 is a chinese module with an STM32F051K8 mirocontroller (\u03bcC) and 3.3V low-dropout regulator (LDO). The \u03bcC acts as UART bridge, providing BSEC outputs from the BME680 sensor.</p> <p>The \u03bcC and sensor operate at 3.3V, but the module can be interfaced at 5V as UART pins on the STM32F051K8 are 5V tolerant. The module also breaks out the BME680 I2C pins, which are not 5V tolerant.</p>"},{"location":"sensors/mcu680/#protocol","title":"Protocol","text":"<p>Under factory settings, the serial protocol is UART 9600 8N1 3.3V/5V TTL.</p> <p>Note</p> <p>The alternative 115200 BAUD rate is not supported.</p> commandsMCU680extra config Command Description <code>message</code> <code>active_mode</code> continuous operation <code>A5 56 02 FD</code> <code>passive_mode</code> single-shot operation <code>A5 56 01 FC</code> <code>passive_read</code> request last measurement <code>A5 56 01 FC</code> <code>sleep</code> sleep mode <code>wake</code> wake up from sleep mode <p>Under the factory settings, the module provides 7 values packed on a 20 bit message.</p> <p>The MCU680 can be further configured with the following commands:</p> Description <code>message</code> note select output <code>A5 55 XX YY</code> <code>XX |= 0x01</code> temperature <code>XX |= 0x02</code> relative humidity <code>XX |= 0x04</code> atmospheric pressure <code>XX |= 0x08</code> IAQ accuracy <code>XX |= 0x10</code> gas resistance <code>XX |= 0x20</code> altitude estimate <code>YY = (0xA5 + 0x55 + XX) % 0x100</code> message checksum output all data <code>A5 55 3F 39</code> factory setting 115200 BAUD rate <code>A5 58 01 FE</code> not supported 9600 BAUD rate <code>A5 58 02 FF</code> factory setting save settings <code>A5 5A 01 00</code> save current settings to flash and reset reset settings <code>A5 5A 02 01</code> restore factory settings"},{"location":"sensors/mcu680/#mcu680","title":"MCU680","text":"infoserialcsvhexdump <p>About the MCU680 sensor (<code>-m MCU680</code>)</p> <pre><code>pms -m MCU680 info\n</code></pre> <pre><code>Bosh Sensortec BME680 sensor observations\n\ntime                                    measurement time [seconds since epoch]\ntemp                                    temperature [\u00b0C]\nrhum                                    relative humidity [%]\npres                                    atmospheric pressure [hPa]\nIAQ_acc                                 IAQ accuracy flag\nIAQ                                     index of air quality [0--500]\ngas                                     gas resistance [k\u03a9]\nalt                                     altitude estimate [m above sea level]\n\nString formats: atm, bme (default), bsec, csv and header\n</code></pre> <p>Read 10 samples (<code>-n 10</code>), one sample every 10 seconds (<code>-i 10</code>)</p> <pre><code>pms -m MCU680 -n 10 -i 10 serial\n</code></pre> <pre><code>2020-09-27 17:20:52: Temp. 24.3 \u00b0C, Rel.Hum. 27.6 %, Press 1012.57 hPa, 40.7 k\u03a9\n2020-09-27 17:21:02: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.53 hPa, 42.1 k\u03a9\n2020-09-27 17:21:12: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.53 hPa, 43.8 k\u03a9\n2020-09-27 17:21:22: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.55 hPa, 45.1 k\u03a9\n2020-09-27 17:21:32: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.55 hPa, 46.4 k\u03a9\n2020-09-27 17:21:42: Temp. 24.2 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 47.6 k\u03a9\n2020-09-27 17:21:52: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 49.0 k\u03a9\n2020-09-27 17:22:02: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 50.0 k\u03a9\n2020-09-27 17:22:12: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.53 hPa, 51.4 k\u03a9\n2020-09-27 17:22:22: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 52.4 k\u03a9\n</code></pre> <p>Print on CSV format (<code>-f csv)</code></p> <pre><code>pms -m MCU680 -n 10 -i 10 serial -f csv\n</code></pre> <pre><code>time, temp, rhum, pres, IAQ_acc, IAQ, gas, alt\n1601220052, 24.3, 27.6, 1012.57, 1, 25, 40.7, 5\n1601220062, 24.2, 27.6, 1012.53, 1, 25, 42.1, 5\n1601220072, 24.2, 27.6, 1012.53, 1, 25, 43.8, 5\n1601220082, 24.2, 27.6, 1012.55, 1, 25, 45.1, 5\n1601220092, 24.2, 27.6, 1012.55, 1, 25, 46.4, 5\n1601220102, 24.2, 27.7, 1012.51, 1, 25, 47.6, 6\n1601220112, 24.1, 27.7, 1012.51, 1, 25, 49.0, 6\n1601220122, 24.1, 27.7, 1012.51, 1, 25, 50.0, 6\n1601220132, 24.1, 27.7, 1012.53, 1, 25, 51.4, 5\n1601220142, 24.1, 27.7, 1012.51, 1, 25, 52.4, 6\n</code></pre> <p>Print on hexdump format (<code>-f hexdump</code>)</p> <pre><code>pms -m MCU680 -n 10 -i 10 serial -f hexdump\n</code></pre> <pre><code>00000000: 5a 5a 3f 0f 09 7d 0a c4 01 8b 89 00 19 00 00 9e f2 00 05 19  ZZ?..}..............\n00000014: 5a 5a 3f 0f 09 79 0a c5 01 8b 85 00 19 00 00 a4 83 00 05 a9  ZZ?..y..............\n00000028: 5a 5a 3f 0f 09 76 0a c8 01 8b 85 00 19 00 00 ab 32 00 05 5f  ZZ?..v..........2.._\n0000003c: 5a 5a 3f 0f 09 74 0a c8 01 8b 87 00 19 00 00 b0 27 00 05 59  ZZ?..t..........'..Y\n00000050: 5a 5a 3f 0f 09 72 0a c9 01 8b 87 00 19 00 00 b5 33 00 05 69  ZZ?..r..........3..i\n00000064: 5a 5a 3f 0f 09 70 0a d0 01 8b 83 00 19 00 00 ba 05 00 06 42  ZZ?..p.............B\n00000078: 5a 5a 3f 0f 09 6f 0a d2 01 8b 83 00 19 00 00 bf 71 00 06 b4  ZZ?..o..........q...\n0000008c: 5a 5a 3f 0f 09 6e 0a d0 01 8b 83 00 19 00 00 c3 6e 00 06 b2  ZZ?..n..........n...\n000000a0: 5a 5a 3f 0f 09 6c 0a cf 01 8b 85 00 19 00 00 c8 ee 00 05 35  ZZ?..l.............5\n000000b4: 5a 5a 3f 0f 09 6a 0a d0 01 8b 83 00 19 00 00 cc b0 00 06 f9  ZZ?..j..............\n</code></pre>"}]}